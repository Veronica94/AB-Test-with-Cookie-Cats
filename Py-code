# Importing pandas

import pandas as pd

# Reading in the data
df = pd.read_csv("datasets/cookie_cats.csv")

# Showing the first few rows
df.head(10)

# Randomization Check
cnt = df.groupby('version').count()

# Distribution Check
%matplotlib inline

# Counting the number of players for each number of gamerounds 
plot_df_full = df.groupby(["userid","sum_gamerounds"]).count().reset_index()
plot_df = plot_df_full[["userid","sum_gamerounds"]]

# Plotting the distribution of players that played 0 to 100 game rounds
ax = plot_df.head(100).plot(x="userid", y="sum_gamerounds")
ax.set_xlabel("userid")
ax.set_ylabel("sum_gamerounds")

# Overall 1-day Retention
retention_1 = 100 * sum(df["retention_1"])/df["retention_1"].count() 
print("There are %.2f%% users that came back the day after they installed the game" % retention_1) #44.52%

# Compare 1-day Retention by AB-group
100 * df.groupby("version")["retention_1"].mean() #level 30: 44.82% level 40: 44.22%

# Test confidence level of the difference using bootstrapped means for each AB-group
boot_1d = []
for i in range(500):
    boot_mean = df.sample(frac=1,replace=True).groupby("version").retention_1.mean()
    boot_1d.append(boot_mean)
    
# Transforming the list to a DataFrame
boot_1d = pd.DataFrame(boot_1d)

# A Kernel Density Estimate plot of the bootstrap distributions
boot_1d.plot.kde() # Two density plots are very different

# Quantify the difference
boot_1d['diff'] = ((boot_1d["gate_30"] - boot_1d["gate_40"])/boot_1d["gate_40"]*100)

# Ploting the bootstrap % difference
ax = boot_1d.plot.kde() # most likely % difference is around 1%-2%
ax.set_xlabel("% diff")

# Probability of a difference
prob = (boot_1d["diff"] > 0).sum()/len(boot_1d["diff"])

'{:.1%}'.format(prob) # 95.8% chance that the difference in retention by 1 day is above 0%

# Similar analysis for 7-day retention
# Calculating 7-day retention for both AB-groups
100 * df.groupby("version")["retention_7"].mean() # level 30: 19% level 40: 18.2%

boot_7d = []
for i in range(500):
    boot_mean = df.sample(frac=1,replace=True).groupby("version").retention_7.mean()
    boot_7d.append(boot_mean)
    
# Transforming the list to a DataFrame
boot_7d = pd.DataFrame(boot_7d)

# Adding a column with the % difference between the two AB-groups
boot_7d['diff'] = ((boot_7d["gate_30"] - boot_7d["gate_40"])/boot_7d["gate_40"]*100)

# Ploting the bootstrap % difference
ax = boot_7d.plot.kde()
ax.set_xlabel("% difference in means")

# Calculating the probability that 7-day retention is greater when the gate is at level 30
prob = (boot_7d["diff"] > 0).sum()/len(boot_7d["diff"])

# Pretty printing the probability
'{:.1%}'.format(prob) # 99.8%






